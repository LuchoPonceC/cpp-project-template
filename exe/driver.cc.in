#include <@PROJECT_NAME@/@PROJECT_NAME@.hpp>
#include <boost/nowide/iostream.hpp>
#include <boost/nowide/args.hpp>
#include <boost/filesystem.hpp>
#include <leatherman/locale/locale.hpp>
#include <leatherman/logging/logging.hpp>

// boost includes are not always warning-clean. Disable warnings that
// cause problems before including the headers, then re-enable the warnings.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wattributes"
#include <boost/program_options.hpp>
#pragma GCC diagnostic pop

using namespace std;
using namespace leatherman::logging;
using namespace leatherman::locale;
namespace po = boost::program_options;

void help(po::options_description& desc)
{
    boost::nowide::cout <<
        _("Synopsis\n"
          "========\n"
          "\n"
          "Example command-line utility.\n"
          "\n"
          "Usage\n"
          "=====\n"
          "\n"
          "  @PROJECT_NAME@ [options]\n"
          "\n"
          "Options\n"
          "=======\n\n"
          "{1}\nDescription\n"
          "===========\n"
          "\n"
          "Displays its own version string.", desc) << endl;
}

void conflicting_options(po::variables_map const& vm, string const& opt1, string const& opt2)
{
    if (vm.count(opt1) && !vm[opt1].defaulted() && vm.count(opt2) && !vm[opt2].defaulted()) {
        throw po::error(opt1 + " and " + opt2 + " options conflict: please specify only one.");
    }
}

template<typename... TOpts>
void conflicting_options(po::variables_map const& vm, string const& opt1, string const& opt2, TOpts && ...opts)
{
    conflicting_options(vm, opt1, opt2);
    conflicting_options(vm, opt1, opts...);
    conflicting_options(vm, opt2, opts...);
}

int main(int argc, char **argv) {
    try {
        // Fix args on Windows to be UTF-8
        boost::nowide::args arg_utf8(argc, argv);

        // Setup logging
        setup_logging(boost::nowide::cerr);

        // Setup UTF-8 for filesystem operations (on Windows)
        // When Boost is statically linked, this needs to be done in every binary using Boost.Filesystem.
        boost::filesystem::path::imbue(leatherman::locale::get_locale());

        po::options_description visible_options("");
        visible_options.add_options()
            ("debug,d", _("Enable full debugging.").c_str())
            ("help,h", _("Print this help message.").c_str())
            ("quiet,q", _("Silences all output.").c_str())
            ("verbose,V", _("Enable verbosity.").c_str())
            ("version,v", _("Print the program's version number and exit.").c_str());

        po::options_description hidden_options("");
        hidden_options.add_options()
            ("log-level,l", po::value<log_level>()->default_value(log_level::warning, "warn"), _("Set logging level.\nSupported levels are: none, trace, debug, info, warn, error, and fatal.").c_str());

        po::options_description command_line_options("");
        command_line_options.add(visible_options).add(hidden_options);

        po::variables_map vm;

        try {
            po::store(po::parse_command_line(argc, argv, command_line_options), vm);

            if (vm.count("help")) {
                help(visible_options);
                return EXIT_SUCCESS;
            }

            po::notify(vm);

            conflicting_options(vm, "log-level", "quiet", "verbose", "debug");
        } catch (exception& ex) {
            colorize(boost::nowide::cerr, log_level::error);
            boost::nowide::cerr << _("Error: {1}", ex.what()) << endl;
            colorize(boost::nowide::cerr);
            help(visible_options);
            return EXIT_FAILURE;
        }

        // Get the logging level
        auto lvl = vm["log-level"].as<log_level>();
        if (vm.count("debug")) {
            lvl = log_level::debug;
        } else if (vm.count("verbose")) {
            lvl = log_level::info;
        } else if (vm.count("quiet")) {
            lvl = log_level::none;
        }
        set_level(lvl);

        if (vm.count("version")) {
            boost::nowide::cout << @PROJECT_NAME_LOWER@::version() << endl;
            return EXIT_SUCCESS;
        }
    } catch (exception& ex) {
        colorize(boost::nowide::cerr, log_level::fatal);
        boost::nowide::cerr << _("unhandled exception: {1}", ex.what()) << endl;
        colorize(boost::nowide::cerr);
        return EXIT_FAILURE;
    }

    boost::nowide::cout << _("Hello!") << endl;

    return error_has_been_logged() ? EXIT_FAILURE : EXIT_SUCCESS;
}
